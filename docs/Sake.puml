@startuml Snake

class AssetMan {
    - textures : std::map<std::string, sf::Texture>
    + loadTexture(const std::string& filename) : bool
    + getTexture(const std::string& filename) : sf::Texture&
}

class Game {
    - window : sf::RenderWindow
    - gameObjects : std::vector<GameObject>
    + run() : void
    + update(float deltaTime) : void
    + render() : void
}

class GameOver {
    - score : int
    - message : std::string
    + displayScore() : void
    + restart() : void
}

class GamePlay {
    - player : Snake
    - enemies : std::vector<Enemy>
    + init(const sf::Texture& texture) : void
    + update(float deltaTime) : void
    + render() : void
}

class MainMenu {
    + show() : void
    + handleInput() : void
}

class PauseGame {
    + resume() : void
    + exit() : void
}

class Snake {
    - m_body : std::list<sf::Sprite>
    - m_directions : std::vector<sf::Vector2f>
    + Init(const sf::Texture &texture) : void
    + Move(const sf::Vector2f &direction) : void
    + Grow(const sf::Vector2f &direction) : void
    + IsSelfIntersecting() : bool
}

class State {
    + enter() : void
    + update() : void
    + exit() : void
}

class StateMan {
    - currentState : State
    - states : std::map<std::string, State>
    + changeState(const std::string& newState) : void
    + update() : void
    + addState(const std::string& stateName, State newState) : void
}

AssetMan --> Game : provides textures and assets
Game --> GameOver : transition to GameOver state
Game --> GamePlay : play the game
Game --> MainMenu : show main menu
Game --> PauseGame : pause and resume gameplay
Snake --> GamePlay : play and control the snake
StateMan --> Game : manage game states
StateMan --> Snake : manage state transitions for the snake
StateMan --> GameOver : manage state transitions for game over
StateMan --> MainMenu : manage state transitions for main menu
StateMan --> PauseGame : manage state transitions for pause game

@enduml
